name: ci

on:
  push:
    branches: [main]

env:
  NODE_VERSION: '20.12.1'
  PNPM_VERSION: '8.15.6'

jobs:
  build_packages:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install PNPM
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Cache PNPM Store
        id: pnpm-cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build --filter @repo/**
  build-punk-repo:
    if: github.event_name == 'push' && contains(github.ref, 'build-')
    runs-on: ubuntu-latest
    needs: build_packages
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install PNPM
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install

      - name: Build Punk Record App
        run: pnpm run build --filter @app/punk-record

      - name: Compress the built code.
        run: zio -r build.zip ./*.json ./*.yaml ./apps/punk-record/.next ./apps/punk-record/public ./apps/punk-record/*.json ./apps/punk-record/*.yaml

      - name: Install sshpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Copy files to the personal server via SCP.
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e scp -o StrictHostKeyChecking=no build.zip ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_PATH }}

      - name: Deploy on the server.
        env:
          SSHPASS: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} <<'ENDSSH'
          echo "START DEPLOY"
          cd ${{ secrets.DEPLOY_PATH }}
          echo "Current directory:"
          pwd
          echo "Unzipping build.zip"
          unzip -o build.zip
          echo "Unzip completed"
          echo "Restarting application"
          pm2 restart ${{ secrets.PM2_APP_NAME }}
          echo "Deployment completed"
          ENDSSH
